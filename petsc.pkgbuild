# Maintainer: Myles English <myles at rockhead dot biz>
# Some copied from from dorsal-1.0-beta2/FEniCS/packages/petsc.package
# Try: git clone git@github.com:mylese/petsc-arch.git
pkgname=petsc
pkgver=3.3_p3
_config=arch-linux2-cxx-opt
pkgrel=1
pkgdesc="Portable, extensible toolkit for scientific computation"
arch=('any')
url="http://www.mcs.anl.gov/petsc/petsc-as"
license=('MIT compatible')
depends=('python2' 'openmpi' 'boost' 'atlas-lapack' 'scalapack' 'umfpack' 'metis' 'parmetis')
# include 'blas', add provides to scalapack-openmpi
makedepends=('gcc' 'gcc-fortran')
install=petsc.install
source=(http://ftp.mcs.anl.gov/pub/petsc/release-snapshots/${pkgname}-${pkgver/_/-}.tar.gz)
md5sums=('00f8c17a76d17a4be725077c2bce5219')

_build_dir=${srcdir}/${pkgname}-${pkgver/_/-}
_install_dir=/opt/petsc/${_config}

#export MAKEFLAGS="-j1"  # for 3.2, workaround bug triggered by scotch

build() {
    cd ${_build_dir}
    #patch -Np1 -i ${startdir}/patch_debug.diff

    unset PETSC_ARCH
    export PETSC_DIR=${_build_dir}

    find ${srcdir} -name "*" -type f -exec \
	sed -i 's#\(/usr/bin/env \|/usr/bin/\)python[2-3]*#\1python2#' {} \;

    # from Dorsal ./FEniCS/packages/petsc.package
    COPTFLAGS=-O2
    CONFOPTS="--with-debugging=0 --with-shared-libraries=1 --with-clanguage=cxx "

    # Available in the AUR:
    #   aur/mumps
    #   aur/scalapack
    #   aur/blacs-mpi
    #   aur/ptscotch-openmpi
    #   aur/scotch

    CONFOPTS="${CONFOPTS} --with-metis --with-metis-dir=/usr/bin"
    PARMETIS_DIR=/usr/bin     # installed from AUR
    CONFOPTS="${CONFOPTS} --with-parmetis --with-parmetis-dir=${PARMETIS_DIR} --with-scalapack --with-scalapack-lib=/usr/lib/libscalapack.so  --with-scalapack-include=/usr/include --with-blacs --with-blacs-lib=/usr/lib/libscalapack.so --with-blacs-include=/usr/include"

    # Couldn't use downloaded scalapack, mumps needs scalapack.
    # "Downloaded scalapack could not be used."
    # (From Dorsal ./FEniCS/packages/petsc.package)
    for external_pkg in hypre mumps; do #ptscotch scotch mumps; do # scalapack; do
	CONFOPTS="${CONFOPTS} --download-${external_pkg} "
    done

    # from Dorsal ./FEniCS/packages/petsc.package
    if [ "${TRILINOS_DIR}" ]; then
	CONFOPTS="${CONFOPTS} --with-ml=1 --with-ml-lib=${TRILINOS_DIR}/lib/libml.so --with-ml-include=${TRILINOS_DIR}/include "
    fi

    # Arch specific
    CONFOPTS="${CONFOPTS} --with-boost-dir=/usr" # --with-blas-lapack-dir=/usr/lib

    python2 ./configure \
	--prefix=${pkgdir}${_install_dir} \
	${CONFOPTS}

    make ${MAKEFLAGS} all
}

package() {
    cd ${_build_dir}

    make ${MAKEFLAGS} PETSC_DIR=${_build_dir} PETSC_ARCH=${_config} install > /dev/null

    sed -i 's#'"${pkgdir}"'##g' "${pkgdir}${_install_dir}/conf/variables"
    sed -i 's#'"${pkgdir}"'##g' "${pkgdir}${_install_dir}/conf/petscvariables"
    sed -i 's#'"${pkgdir}"'##g' "${pkgdir}${_install_dir}/conf/rules"
    sed -i 's#'"${pkgdir}"'##g' "${pkgdir}${_install_dir}/include/petscconf.h"
    sed -i 's#'"${pkgdir}"'##g' "${pkgdir}${_install_dir}/include/petscconfiginfo.h"
    sed -i 's#'"${pkgdir}"'##g' "${pkgdir}${_install_dir}/conf/petscrules"

    export PETSC_DIR=${_install_dir}
    
    # Note: the hyperlinks between documentation, tutorials and examples are
    # not perfect yet

    # documentation
    mkdir -p ${pkgdir}/usr/share/doc/$pkgname/
    cp -r ${_build_dir}/docs ${pkgdir}/usr/share/doc/$pkgname/

    # tutorials
    cp -r ${_build_dir}/tutorials ${pkgdir}/usr/share/doc/$pkgname/

    # src for tutorials
    cp -r ${_build_dir}/src ${pkgdir}/usr/share/doc/$pkgname/tutorials/

    # install licenCe (even though there is no such word as licenSes)
    mkdir -p ${pkgdir}/usr/share/licenses/petsc
    cp ${_build_dir}/docs/copyright.html ${pkgdir}/usr/share/licenses/$pkgname/

    mkdir -p ${pkgdir}/etc/profile.d
    echo "export PETSC_DIR=${_install_dir}" > ${pkgdir}/etc/profile.d/petsc.sh
    chmod +x ${pkgdir}/etc/profile.d/petsc.sh

    # show where the shared libraries are
    install -d -m755 "${pkgdir}"/etc/ld.so.conf.d/
    echo "${_install_dir}/lib" > "${pkgdir}"/etc/ld.so.conf.d/petsc.conf
}
